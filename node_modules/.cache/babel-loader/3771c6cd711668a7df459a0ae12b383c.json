{"ast":null,"code":"import _defineProperty from \"/home/marjaan/sandBox/projects/marketo-pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/home/marjaan/sandBox/projects/marketo-pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/marjaan/sandBox/projects/marketo-pwa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport update from 'react-addons-update';\nvar initialState = {\n  loading: false,\n  products: [],\n  orderId: 0,\n  orders: [],\n  currentOrder: [],\n  phoneNumber: '',\n  orderItemIds: [],\n  orderCount: 0,\n  addresses: [],\n  shipments: [],\n  shipmentOrder: {},\n  token: localStorage.getItem('user-token') !== null ? localStorage.getItem('user-token') : null\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_PRODUCTS':\n      {\n        return _objectSpread({}, state, {\n          products: action.products\n        });\n      }\n\n    case 'SET_ORDERS':\n      {\n        return _objectSpread({}, state, {\n          orders: action.orders\n        });\n      }\n\n    case 'SET_ORDERID':\n      {\n        return _objectSpread({}, state, {\n          orderId: action.orderId\n        });\n      }\n\n    case 'SET_TOKEN':\n      {\n        return _objectSpread({}, state, {\n          token: action.token\n        });\n      }\n\n    case 'SHOW_LOADING':\n      {\n        return _objectSpread({}, state, {\n          loading: action.loading\n        });\n      }\n\n    case 'SET_PHONENUMBER':\n      {\n        return _objectSpread({}, state, {\n          phoneNumber: action.phoneNumber\n        });\n      }\n\n    case 'SET_CURRENT_ORDER':\n      {\n        debugger;\n        return _objectSpread({}, state, {\n          currentOrder: action.currentOrder\n        });\n      }\n\n    case 'SET_ORDER_ITEM_IDS':\n      {\n        return _objectSpread({}, state, {\n          orderItemIds: [].concat(_toConsumableArray(state.orderItemIds), [action.newItem])\n        });\n      }\n\n    case 'UPDATE_ORDER_ITEM_IDS':\n      {\n        var j = state.orderItemIds.findIndex(function (i) {\n          return i.id === action.item.id;\n        });\n        return update(state, {\n          orderItemIds: _defineProperty({}, j, {\n            count: {\n              $set: action.item.count\n            }\n          })\n        });\n      }\n\n    case 'REMOVE_ORDER_ITEM_ID':\n      {\n        return _objectSpread({}, state, {\n          orderItemIds: _toConsumableArray(state.orderItemIds.filter(function (val) {\n            return val.id !== action.id;\n          }))\n        });\n      }\n\n    case 'SET_ORDER_COUNT':\n      {\n        return _objectSpread({}, state, {\n          orderCount: action.orderCount\n        });\n      }\n\n    case 'SET_SHIPMENT_ORDER':\n      {\n        debugger;\n        return _objectSpread({}, state, {\n          shipmentOrder: action.shipmentOrder\n        });\n      }\n\n    case 'SET_ADDRESSES':\n      {\n        return _objectSpread({}, state, {\n          addresses: action.addresses\n        });\n      }\n\n    case 'SET_SHIPMENTS':\n      {\n        return _objectSpread({}, state, {\n          shipments: action.shipments\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/marjaan/sandBox/projects/marketo-pwa/src/config/redux/reducers/reducers.js"],"names":["update","initialState","loading","products","orderId","orders","currentOrder","phoneNumber","orderItemIds","orderCount","addresses","shipments","shipmentOrder","token","localStorage","getItem","reducer","state","action","type","newItem","j","findIndex","i","id","item","count","$set","filter","val"],"mappings":"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","sourcesContent":["import update from 'react-addons-update';\n\nconst initialState = {\n    loading: false,\n    products: [],\n    orderId: 0,\n    orders: [],\n    currentOrder: [],\n    phoneNumber: '',\n    orderItemIds: [],\n    orderCount: 0,\n    addresses: [],\n    shipments: [],\n    shipmentOrder: {},\n    token: localStorage.getItem('user-token') !== null ? localStorage.getItem('user-token') : null\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'SET_PRODUCTS': {\n             \n            return {\n                ...state,\n                products: action.products\n            }\n        }\n        case 'SET_ORDERS': {\n            \n            return {\n                ...state,\n                orders: action.orders\n            }\n        }\n        case 'SET_ORDERID': {\n            \n            return {\n                ...state,\n                orderId: action.orderId\n            }\n        }\n        case 'SET_TOKEN': {\n              \n            return {\n                ...state,\n                token: action.token\n            }\n        }\n\n        case 'SHOW_LOADING': {\n            return {\n                ...state,\n                loading: action.loading\n            }\n        }\n        case 'SET_PHONENUMBER': {\n            return {\n                ...state,\n                phoneNumber: action.phoneNumber\n            }\n        }\n        case 'SET_CURRENT_ORDER': {\n            debugger\n            return {\n                ...state,\n                currentOrder: action.currentOrder\n            }\n        }\n        case 'SET_ORDER_ITEM_IDS': {\n             \n            return{\n                ...state,\n                orderItemIds: [...state.orderItemIds, action.newItem]\n            }\n        }\n        case 'UPDATE_ORDER_ITEM_IDS': {\n            const j = state.orderItemIds.findIndex(i => i.id === action.item.id)\n             \n            return update(state, { \n                orderItemIds: { \n                  [j]: {\n                    count: {$set: action.item.count}\n                  }\n                }\n              });\n        }\n        case 'REMOVE_ORDER_ITEM_ID': {\n             \n            return {\n                ...state,\n                orderItemIds: [...state.orderItemIds.filter( val => val.id !== action.id )]\n            }\n        }\n        case 'SET_ORDER_COUNT': {\n             \n           return{\n               ...state,\n               orderCount: action.orderCount\n           }\n       }\n       case 'SET_SHIPMENT_ORDER' : {\n           debugger\n        return {\n            ...state,\n             shipmentOrder: action.shipmentOrder\n        }\n    }\n       case 'SET_ADDRESSES' : {\n           return {\n               ...state,\n                addresses: action.addresses\n           }\n       }\n       case 'SET_SHIPMENTS' : {\n        return {\n            ...state,\n             shipments: action.shipments\n        }\n    }\n        default:\n            return state;\n    }\n}\nexport default reducer;"]},"metadata":{},"sourceType":"module"}